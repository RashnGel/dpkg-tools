#!/usr/bin/env ruby

require 'optparse'
require 'rubygems'
require 'dpkg-tools'

def main
  options = {}
  opt_parser = OptionParser.new do |opts|
    opts.banner = "Usage: dpkg-gem [options] GEM-NAME"
  
    opts.separator ""
    opts.separator "Specific options:"
  
    opts.on("-f", "--from-gem", "Take the GEM-NAME argument as the path",
                                "to a .gem and create package from that",
                                "rather than looking remotely.",
                                "Implies --ignore-dependencies.") do |from_path|
      options[:from_path] = from_path
      options[:ignore_dependencies] = true
    end
  
    opts.on("-f", "--ignore-dependencies", "Don't fetch and create packages for dependencies.") do
      options[:ignore_dependencies] = true
    end
  
    opts.separator ""
    opts.separator "Common options:"
  
    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end

    # Another typical switch to print the version.
    opts.on_tail("--version", "Show version") do
      puts OptionParser::Version.join('.')
      exit
    end
  end
  opt_parser.parse!
  
  execute!(options, ARGV)
end

def execute!(options, args)
  DpkgTools::Package::Config.root_path = File.expand_path('./')
  
  begin
    if options[:from_path]
      raise ArgumentError, "You must supply the path to a valid gem file!" unless args.size > 0
      gem_path = args.first
      raise ArgumentError, "You must supply the path to a valid gem file - #{gem_path} doesn't exist!" unless File.exist?(gem_path)
      raise ArgumentError, "You must supply the path to a valid gem file - #{gem_path} is a directory!" unless File.file?(gem_path)
  
      DpkgTools::Package::Gem.setup_from_path(gem_path, options)
    else
      raise ArgumentError, "You must supply the name of a gem!" unless args.size > 0
      DpkgTools::Package::Gem.setup_from_name(args.first, options)
    end
  rescue ArgumentError => e
    puts opt_parser
    puts ""
    puts e
  end
end

if $0 == __FILE__
  main
end
